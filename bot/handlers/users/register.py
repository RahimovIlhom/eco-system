from datetime import timedelta, datetime

from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards.default import language_markup, contact_keyboard, participant_menu, location_markup, yes_or_no
from pymysql import IntegrityError
from states import AddParticipantStates
from loader import dp, db
from filters import ChatTypeFilter
from utils import get_distance


# ----------------------- Start register QR code---------------------------------------------------------

async def register_qr_code(message, state, lang):
    data = await state.get_data()
    code = data.get('code', None)
    qr_code = await db.check_qr_code(code)
    TEXTS = {
        'uz': {
            'already_registered': "Bu QR kod avval {fullname} tomonidan ro'yxatdan o'tkazilgan",
            'success': "Joylashuvingizni quyidagi tugma orqali yuboring:\n\n",
            'expiration_time': "Bu QR kod aktivlik vaqti tugagan.",
            'no_active': "Bu QR kod aktiv emas",
            'not_found': "Bu QR kod topilmadi"
        },
        'ru': {
            'already_registered': "–≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω {fullname}",
            'success': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n\n",
            'expiration_time': "–≠—Ç–æ—Ç QR-–∫–æ–¥ –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            'no_active': "–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.",
            'not_found': "–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω"
        }
    }

    if qr_code:
        if qr_code['is_active']:
            expiration_time = qr_code['created_at'] + timedelta(minutes=qr_code['activity_time'])
            if expiration_time >= datetime.now():
                if await db.get_registered_qr_code(qr_code['id']):
                    await db.update_active_qr_code(qr_code['id'])
                    await message.answer(TEXTS[lang]['already_registered'].format(fullname=qr_code['fullname']),
                                         reply_markup=await participant_menu(lang))
                    await state.clear()
                else:
                    await message.answer(TEXTS[lang]['success'], reply_markup=await location_markup(lang))
                    await state.set_state(State('qr_code_location'))
                    await state.update_data(qr_code_id=qr_code['id'], eco_branch_id=qr_code['eco_branch_id'],
                                            language=lang)
            else:
                await db.update_active_qr_code(qr_code['id'])
                await message.answer(TEXTS[lang]['expiration_time'],
                                     reply_markup=await participant_menu(lang))
                await state.clear()
        else:
            await message.answer(TEXTS[lang]['no_active'],
                                 reply_markup=await participant_menu(lang))
            await state.clear()
    else:
        await message.answer(TEXTS[lang]['not_found'], reply_markup=await participant_menu(lang))
        await state.clear()


@dp.message(ChatTypeFilter('private'), State('qr_code_location'), lambda msg: msg.content_type == ContentType.LOCATION)
async def add_qr_code_location(message: Message, state: FSMContext):
    location = message.location
    data = await state.get_data()
    lang = data['language']
    qr_code_id = data['qr_code_id']
    eco_branch_id = data['eco_branch_id']
    TEXTS = {
        'uz': {
            'success': "‚úÖ QR kod muvaffaqiyatli ro'yxatdan o'tkazildi!\n\n",
            'error': "‚ùóÔ∏è Xatolik yuz berdi!\n\n",
            'distance': ("Ushbu QR kod {distance} m masofada yuborilgan. QR kodni ro ªyxatdan o ªtkazish uchun uni kod "
                         "olgan joydan 10 m masofada yuboring.\n\n")
        },
        'ru': {
            'success': "‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n",
            'error': "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n",
            'distance': ("–≠—Ç–æ—Ç QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distance} –º. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥, "
                         "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –±–æ–ª–µ–µ 10 –º –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞.\n\n")
        }
    }
    eco_branch_dict = await db.get_eco_branch(eco_branch_id)
    distance = get_distance((location.latitude, location.longitude),
                            (eco_branch_dict['latitude'], eco_branch_dict['longitude']))
    if distance > 10:
        await message.answer(TEXTS[lang]['distance'].format(distance=distance),
                             reply_markup=await participant_menu(lang))
        await state.clear()
        return
    await db.add_location(location)  # TODO: Add location to db
    location_dict = await db.get_location_by_coordinates(location)
    await db.update_active_qr_code(qr_code_id)
    try:
        await db.add_registered_qrcode(participant_id=message.from_user.id, qrcode_id=qr_code_id,
                                       location_id=location_dict['id'])
    except IntegrityError as err:
        await message.answer(TEXTS[lang]['error'] + f"error: {err}", reply_markup=await participant_menu(lang))
        await state.clear()
        return
    await message.answer(TEXTS[lang]['success'], reply_markup=await participant_menu(lang))
    await state.clear()


#  ------------------------------ End register QR code ----------------------------------------------

# ----------------------------- Start add participant -----------------------------------------------


async def register_user(message, state):
    await message.answer(f"Assalomu alaykum, hurmatli {message.from_user.full_name} EcoSystem botiga xush kelibsiz!\n"
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π {message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoSystem –±–æ—Ç!\n\n"
                         f"Iltimos, tilni tanlang / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.", reply_markup=await language_markup())


@dp.message(ChatTypeFilter('private'), AddParticipantStates.language,
            lambda msg: msg.text in ["üá∫üáø O'zbek tili", 'üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫'])
async def add_language(message: Message, state: FSMContext):
    lang = 'uz' if message.text == "üá∫üáø O'zbek tili" else 'ru'
    await state.update_data(language=lang)
    TEXTS = {
        'uz': "Ma'lumotlaringizni saqlashimizga rozilik bildirasizmi?\n\n‚ö†Ô∏è Eslatma!\nKonkursda qatnashish uchun rozilik bildiring.",
        'ru': "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ."
    }
    await message.answer(TEXTS[lang], reply_markup=await yes_or_no(lang))
    await state.set_state(AddParticipantStates.save_request)


@dp.message(ChatTypeFilter('private'), AddParticipantStates.save_request,
            lambda msg: msg.text in ["üëç Ha", "üëç –î–∞", "üôÖ Yo'q", "üôÖ –ù–µ—Ç"])
async def question_save_request(message: Message, state: FSMContext):
    lang = 'uz' if message.text in ["üëç Ha", "üôÖ Yo'q"] else 'ru'
    TEXTS = {
        'uz': "üìû Quyidagi tugmani bosib, kontaktingizni yuboring",
        'ru': "üìû –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç"
    }
    if message.text in ["üôÖ Yo'q", "üôÖ –ù–µ—Ç"]:
        ERR_TEXTS = {
            'uz': "‚ùóÔ∏è Kechirasiz siz konkursimizda ishtirok eta olmaysiz!",
            'ru': "‚ùóÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ!"
        }
        await message.answer(ERR_TEXTS[lang], reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    await message.answer(TEXTS[lang], reply_markup=await contact_keyboard(lang))
    await state.set_state(AddParticipantStates.phone)


@dp.message(ChatTypeFilter('private'), AddParticipantStates.phone, lambda msg: msg.content_type == ContentType.CONTACT)
async def add_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data['language']
    TEXTS = {
        'uz': "Ism-familiyangizni yuboring",
        'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
    }
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer(TEXTS[lang], reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddParticipantStates.fullname)


@dp.message(ChatTypeFilter('private'), AddParticipantStates.fullname, lambda msg: msg.content_type == ContentType.TEXT)
async def add_fullname(message: Message, state: FSMContext):
    fullname = message.text
    await state.update_data(fullname=fullname)
    data = await state.get_data()
    lang = data['language']
    code = data.get('code', None)
    data.update({'tg_id': message.from_user.id})
    TEXTS = {
        'uz': {
            'added': "üëç Hurmatli {fullname} siz muvaffaqiyatli ro'yxatdan o'tdingiz!\n\n",
            'error': ("‚ùóÔ∏è Ro ªyxatdan o ªtishda xatolik yuz berdi! Qayta ro ªyxatdan o ªtish uchun /start buyrug ªini "
                      "yuboring.\n\n")
        },
        'ru': {
            'added': "üëç –£–≤–∞–∂–∞–µ–º—ã–π {fullname}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n\n",
            'error': ("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≤–æ, "
                      "—á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n")
        }
    }
    try:
        await db.add_participant(**data)
    except Exception as e:
        await message.answer(TEXTS[lang]['error'] + f"error: {e}")
        await state.clear()
    else:
        await message.answer(TEXTS[lang]['added'].format(fullname=fullname))
        if code:
            await register_qr_code(message, state, lang)
        else:
            TEXTS = {
                'uz': "Bosh menu",
                'ru': "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            }
            await message.answer(TEXTS[lang], reply_markup=await participant_menu(lang))
        await state.clear()

# ----------------------------- End add participant -------------------------------------------------
