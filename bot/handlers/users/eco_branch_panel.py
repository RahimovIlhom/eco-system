from typing import Union

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from filters import ChatTypeFilter, AdminFilter
from loader import dp, db, bot
from keyboards.inline import eco_branches_inlines, EcoBranchCallbackData, eco_branch_detail, get_employees_inlines_by_branch
from keyboards.default import employee_menu


@dp.message(ChatTypeFilter('private'), AdminFilter(), lambda msg: msg.text in ["üè¢ Punktlar", "üè¢ –ü—É–Ω–∫—Ç—ã"])
async def eco_branch_list_panel(message: Union[Message, CallbackQuery], lang='uz'):
    if isinstance(message, Message):
        lang = 'ru' if message.text == "üè¢ –ü—É–Ω–∫—Ç—ã" else 'uz'
        await message.answer(message.text, reply_markup=await eco_branches_inlines(lang))
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_text("üè¢ –ü—É–Ω–∫—Ç—ã" if lang == 'uz' else "üè¢ Punktlar", reply_markup=await eco_branches_inlines(lang))


@dp.callback_query(AdminFilter(), EcoBranchCallbackData.filter())
async def eco_branch_callback(call: CallbackQuery, callback_data: EcoBranchCallbackData, state: FSMContext):
    branch_id = callback_data.branch_id
    lang = callback_data.lang
    level = callback_data.level
    action = callback_data.action
    if level == -1:
        await call.message.delete()
    elif level == 0:
        await eco_branch_list_panel(call, lang)
    elif level == 1:
        await eco_branch_detail_func(call, branch_id, lang)
    elif level == 2:
        if action == 'deactivate':
            await deactivate_eco_branch_func(call, branch_id, lang)
        elif action == 'activate':
            await activate_eco_branch_func(call, branch_id, lang)
        elif action == 'edit':
            await edit_eco_branch_func(call, branch_id, lang, state)
        elif action == 'remove_employees_list':
            await remove_employees_list_func(call, branch_id, lang=lang)
        elif action == 'add_employee':
            await add_employee_func(call, branch_id, lang=lang, state=state)
    elif level == 3:
        await remove_employee_func(call, branch_id, action, lang)


async def eco_branch_detail_func(call, branch_id, lang):
    eco_branch = await db.get_eco_branch(branch_id)
    employees = await db.get_employees_by_branch(branch_id)

    # Formatlangan matn
    if lang == 'uz':
        message_text = (
            f"üÜî ID: {eco_branch['id']}\n"
            f"üè¢ Nomi: {eco_branch['name_uz']}\n"
            f"üë§ Egasining FIO: {eco_branch['chief_name']}\n"
            f"üìû Telefon: {eco_branch['phone']}\n"
            f"üìç Manzil: {eco_branch['address_uz']}\n"
            f"üïí Ish vaqti: {eco_branch['start_time']} - {eco_branch['end_time']}\n"
            f"üìÖ Ish kunlari: {eco_branch['working_days']}\n"
            f"üìç Koordinatalar: {eco_branch['latitude']}, {eco_branch['longitude']}\n"
            f"‚ÑπÔ∏è Ma'lumot: {eco_branch['information']}\n"
            f"‚è≥  Aktivlik vaqti: {eco_branch['activity_time'].strftime('%H:%M, %d-%m-%Y, %A')}\n\n"
            f"Holat: {'üü¢ Aktiv' if eco_branch['is_active'] else 'üî¥ Noaktiv'}"
        )
        if employees:
            employees_text = "\n".join([f"{i + 1}. {employee['fullname']} - {employee['phone']}" for i, employee in enumerate(employees)])
            message_text += f"\n\n<b>Xodimlar</b>\n{employees_text}"
    else:  # rus tili uchun
        message_text = (
            f"üÜî ID: {eco_branch['id']}\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {eco_branch['name_ru']}\n"
            f"üë§ –§–ò–û –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞: {eco_branch['chief_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {eco_branch['phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {eco_branch['address_ru']}\n"
            f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {eco_branch['start_time']} - {eco_branch['end_time']}\n"
            f"üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: {eco_branch['working_days']}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {eco_branch['latitude']}, {eco_branch['longitude']}\n"
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {eco_branch['information']}\n"
            f"‚è≥  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {eco_branch['activity_time'].strftime('%H:%M, %d-%m-%Y, %A')}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if eco_branch['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        if employees:
            employees_text = "\n".join([f"{i + 1}. {employee['fullname']} - {employee['phone']}" for i, employee in enumerate(employees)])
            message_text += f"\n\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n{employees_text}"

    if isinstance(call, CallbackQuery):
        await call.message.edit_text(message_text, reply_markup=await eco_branch_detail(branch_id, lang))
    elif isinstance(call, Message):
        await call.answer(message_text, reply_markup=await eco_branch_detail(branch_id, lang))


async def deactivate_eco_branch_func(call, branch_id, lang):
    await db.deactivate_eco_branch(branch_id)
    await eco_branch_detail_func(call, branch_id, lang)
    await call.message.answer("‚úÖ Eko punkt aktivsizlantirildi!" if lang == 'uz' else "‚úÖ Eko –ø—É–Ω–∫—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    MESSAGES = {
        'uz': "Eko punkt aktivsiztirildi!",
        'ru': "–≠–∫–æ –ø—É–Ω–∫—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    }
    employees = await db.get_employees_by_eco_branch(branch_id)
    if employees:
        for emp in employees:
            try:
                await bot.send_message(emp['chat_id'], MESSAGES[emp['lang']], reply_markup=ReplyKeyboardRemove())
            except Exception:
                pass


async def activate_eco_branch_func(call, branch_id, lang):
    await db.activate_eco_branch(branch_id)
    await eco_branch_detail_func(call, branch_id, lang)
    MESSAGES = {
        'uz': "Eko punkt muvaffaqiyatli aktivlashtirildi!",
        'ru': "–ï–∫–æ –ø—É–Ω–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
    }
    await call.message.answer("‚úÖ Eko punkt muvaffaqiyatli aktivlashtirildi!" if lang == 'uz' else "‚úÖ Eko –ø—É–Ω–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    employees = await db.get_employees_by_eco_branch(branch_id)
    if employees:
        for emp in employees:
            try:
                await bot.send_message(emp['chat_id'], MESSAGES[emp['lang']], reply_markup=await employee_menu(emp['lang']))
            except Exception:
                pass


async def edit_eco_branch_func(call, branch_id, lang, state: FSMContext = None):
    from .admin_handler import add_or_edit_eco_branch
    await call.message.edit_text("Eko punktni o'zgartirish!" if lang == 'uz' else "–ò–∑–º–µ–Ω–∏—Ç—å Eko –ø—É–Ω–∫—Ç!",
                                 reply_markup=None)
    await add_or_edit_eco_branch(call.message, state, branch_id)


async def remove_employees_list_func(call, branch_id, lang):
    TEXTS = {
        'uz': "O'chirish uchun xodimni tanlang!",
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!"
    }
    await call.message.edit_text(TEXTS[lang], reply_markup=await get_employees_inlines_by_branch(branch_id, lang))


async def remove_employee_func(call, branch_id, employee_id, lang):
    await db.remove_employee(employee_id)
    await eco_branch_detail_func(call, branch_id, lang)
    await call.message.answer("‚úÖ Xodim muvaffaqiyatli o'chirildi!" if lang == 'uz' else "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")


async def add_employee_func(call, branch_id, lang, state: FSMContext = None):
    from .admin_handler import add_employee_handler
    await call.message.edit_text("Xodimni qo'shish!" if lang == 'uz' else "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!", reply_markup=None)
    await add_employee_handler(call.message, state, branch_id, lang)
